# Generated by Django 4.0.3 on 2022-06-21 07:12

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('city_id', models.AutoField(primary_key=True, serialize=False)),
                ('city_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'db_table': 'cities',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Districts',
            fields=[
                ('dis_id', models.AutoField(primary_key=True, serialize=False)),
                ('dis_name', models.CharField(blank=True, max_length=255, null=True)),
                ('city_id', models.ForeignKey(blank=True, db_column='city_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.cities')),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'db_table': 'districts',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Provinces',
            fields=[
                ('prov_id', models.AutoField(primary_key=True, serialize=False)),
                ('prov_name', models.CharField(blank=True, max_length=255, null=True)),
                ('locationid', models.IntegerField(blank=True, null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
                'db_table': 'provinces',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subdistricts',
            fields=[
                ('subdis_id', models.AutoField(primary_key=True, serialize=False)),
                ('subdis_name', models.CharField(blank=True, max_length=255, null=True)),
                ('dis_id', models.ForeignKey(blank=True, db_column='dis_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.districts')),
            ],
            options={
                'verbose_name': 'Sub District',
                'verbose_name_plural': 'Sub Districts',
                'db_table': 'subdistricts',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='cities',
            name='prov_id',
            field=models.ForeignKey(blank=True, db_column='prov_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.provinces'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
